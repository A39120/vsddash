apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "pt.isel.vsddashboardapplication"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding.enabled = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    def futures_version = "1.0.0-alpha02"
    def lifecycle_version = "2.0.0"
    def room_version = "2.1.0-alpha06"
    def work_version = "1.0.0"
    def paging_version = "2.1.0"
    def dagger_version = "2.15"
    def okhttp_version = "3.13.1"
    def databinding_version = '1.0.0-beta01'
    def spring_websocket_version = "5.0.5.RELEASE"
    def spring_messaging_version = "5.0.5.RELEASE"
    def stomp_version = "1.6.4"
    def jackson_version = "2.9.8"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:recyclerview-v7:28.0.0"
    implementation "com.android.support:support-fragment:28.0.0"

    // Jetpack library
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version" // Lifecycle + ViewModel
    implementation "android.arch.work:work-runtime-ktx:$work_version"           // For Services
    implementation "androidx.concurrent:concurrent-futures:$futures_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx

    // Network connection
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.github.NaikSoftware:StompProtocolAndroid:$stomp_version"

    // Misc
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"

    // UI
    api 'com.google.android.material:material:1.1.0-alpha06'
    implementation 'com.android.support:design:28.0.0-alpha1'

    kapt "androidx.room:room-compiler:$room_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"


    debugImplementation 'androidx.fragment:fragment-testing:1.1.0-alpha08'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    implementation 'android.arch.navigation:navigation-fragment:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.0.0'

}
